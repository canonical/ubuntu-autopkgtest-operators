#!/usr/bin/python3
# Pick up running tests, their status and logtail from the "teststatus" fanout
# queue, and writes the data into running.json

import json
import os
import tempfile

from helpers.utils import amqp_connect, get_autopkgtest_cloud_conf

QUEUE_NAME = "running-listener"
EXCHANGE_NAME = "teststatus.fanout"


class AutopkgtestRunningTests:
    def __init__(self, output):
        # package -> runhash -> release -> arch -> (params, duration, logtail)
        self.run_info = {}
        self.output = output

    def process_message(self, channel, method, properties, message):
        """Process AMQP status message, update run_info."""
        if isinstance(message, bytes):
            message = message.decode("UTF-8", errors="replace")
        info = json.loads(message)

        runhash = ""
        params = info.get("params", {})
        for p in sorted(params):
            runhash += f"{p}_{params[p]};"
        params["uuid"] = info.get("uuid", "")

        if info["running"]:
            self.run_info.setdefault(info["package"], {}).setdefault(
                runhash, {}
            ).setdefault(info["release"], {})[info["architecture"]] = (
                params,
                info.get("duration", 0),
                info["logtail"],
            )
        else:
            try:
                del self.run_info[info["package"]][runhash][info["release"]][
                    info["architecture"]
                ]

                # prune empty dicts
                if not self.run_info[info["package"]][runhash][info["release"]]:
                    del self.run_info[info["package"]][runhash][info["release"]]
                    if not self.run_info[info["package"]][runhash]:
                        del self.run_info[info["package"]][runhash]
                        if not self.run_info[info["package"]]:
                            del self.run_info[info["package"]]
            except KeyError:
                pass

        with tempfile.NamedTemporaryFile(
            mode="w",
            dir=os.path.dirname(self.output),
            suffix=".json",
            delete_on_close=False,
        ) as tf:
            tf.write(json.dumps(self.run_info))
            tf.close()
            os.rename(tf.name, self.output)


def main():
    cp = get_autopkgtest_cloud_conf()
    running_json = cp["web"]["running_cache"]
    info_writer = AutopkgtestRunningTests(running_json)

    amqp_con = amqp_connect()
    status_ch = amqp_con.channel()
    status_ch.exchange_declare(EXCHANGE_NAME, "fanout")
    status_ch.queue_declare(QUEUE_NAME, durable=False, auto_delete=True)
    status_ch.queue_bind(QUEUE_NAME, EXCHANGE_NAME, QUEUE_NAME)
    status_ch.basic_consume(QUEUE_NAME, info_writer.process_message)

    status_ch.start_consuming()


if __name__ == "__main__":
    main()
